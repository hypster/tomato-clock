{"version":3,"sources":["features/clock/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Button","id","children","onClick","className","initialState","breaktime","sessiontime","active","timeleft","timer","Clock","props","startorstop","state","clearInterval","setState","setInterval","prevState","audioRef","current","volume","play","sessionIndicator","classList","add","animationTimer","setTimeout","remove","INTERVAL","React","createRef","this","newtime","ref","formatTime","src","pause","currentTime","Component","miliseconds","seconds","Math","floor","minutes","padTime","time","String","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8538cacf.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './Counter.css';\n\nfunction Button({id, children, onClick}){\n  return <button id={id} onClick={onClick} className='button'>{children}</button>\n}\n\n\nconst initialState = {\n    breaktime: 5,\n    sessiontime: 25,\n    active: 'session',\n    timeleft: 25 * 60000, // in miliseconds,\n    timer: 0,\n  };\n\n\n// const initialState = {\n//   breaktime: 1,\n//   sessiontime: 1,\n//   active: 'session',\n//   timeleft: 0.05 * 60000, // in miliseconds,\n//   timer: 0,\n// };\n\n\n\nexport default class Clock extends React.Component {\n  constructor(props){\n    super(props)\n    \n    this.state = initialState\n    this.INTERVAL = 50\n    this.audioRef = React.createRef()\n    this.sessionIndicator = React.createRef()\n    this.animationTimer = 0\n  }\n\n  startorstop = () => {  \n    let {timer} = this.state\n    if(timer != 0){ // exists schedule\n      clearInterval(timer)\n      this.setState({\n        timer: 0\n      })\n    } else { //schedule event \n      let id = setInterval(() => {\n\n          this.setState((prevState) => {\n            let {\n              active, \n              timeleft, \n              sessiontime,\n              breaktime,\n            } = prevState\n            \n\n            timeleft -= 1000\n            if(timeleft == 0){\n                this.audioRef.current.volume = 0.2;\n                this.audioRef.current.play()\n                \n            }\n            else if (timeleft < 0) {\n              active = active === 'session'? 'break': 'session'\n              this.sessionIndicator.current.classList.add('active')\n              this.animationTimer = setTimeout(() => {\n                this.sessionIndicator.current.classList.remove('active')\n              }, 1000)\n              if (active === 'session'){\n                timeleft = sessiontime * 60000\n              } else {\n                timeleft = breaktime * 60000\n              }\n            }\n            return {\n              timeleft,\n              active\n            }\n            \n          })\n        \n      }, this.INTERVAL)\n      \n      this.setState({\n        timer: id\n      })\n    }\n  \n  }\n\n  render() {\n    let {breaktime, sessiontime, active, timeleft, timer} = this.state\n    return (\n      <div>\n        <div className=\"config\">\n          <div>\n            <p id=\"break-label\">Break Length</p>\n            <Button id=\"break-increment\" onClick={\n              () => {\n                if (timer)\n                  return\n\n                let newtime = breaktime + 1\n                if (newtime <= 60){\n                  if (active === 'break'){\n                    timeleft = newtime * 60000\n                  }\n                  this.setState({\n                    breaktime: newtime,\n                    timeleft\n                  })\n                }\n                \n              }\n            }>+</Button>\n            <span id=\"break-length\">{breaktime}</span>\n            <Button id=\"break-decrement\" onClick={\n              () => {\n                if (timer)\n                  return\n\n                let newtime = breaktime-1\n                if (newtime > 0){\n                  if (active === 'break'){\n                    timeleft = newtime * 60000\n                  }\n                  this.setState({\n                    breaktime: newtime,\n                    timeleft,\n                  })\n                }\n              }\n              }>-</Button>\n          </div>\n          <div>\n            <p id=\"session-label\">Session Length</p>\n            <Button id=\"session-increment\" onClick={() => {\n              if (timer)\n                return\n              let newtime = sessiontime+1\n              if (newtime <= 60){\n                if (active === 'session'){\n                  timeleft = newtime * 60000\n                }\n                this.setState({\n                  sessiontime: newtime,\n                  timeleft,\n                })\n              }\n              \n            }}>+</Button>\n            <span id=\"session-length\">{sessiontime}</span>\n            <Button id=\"session-decrement\" onClick={() => {\n              if (timer)\n                return\n              let newtime = sessiontime-1\n              if (newtime > 0){\n                if (active === 'session'){\n                  timeleft = newtime * 60000\n                }\n                this.setState({\n                  sessiontime: newtime,\n                  timeleft,\n                })\n              }\n            }}>-</Button>\n          </div>\n        </div>\n        \n        <div>\n          <div id='timer-label' ref={this.sessionIndicator}>{active}</div>\n          <h1 id=\"time-left\">{formatTime(timeleft)}</h1>\n          <audio ref={this.audioRef} id=\"beep\">\n            <source src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></source>\n          </audio>\n        </div>\n  \n        <div className=\"btn-group\">\n          <Button onClick={this.startorstop} id=\"start_stop\"><span className=\"play\"></span><span className=\"pause\"></span></Button>\n          <Button id=\"reset\" onClick={()=>{\n            if (this.state.timer) {\n              clearInterval(this.state.timer)\n            }\n            if (this.animationTimer != 0){\n              clearInterval(this.animationTimer)\n              this.animationTimer = 0\n            }\n            this.sessionIndicator.current.classList.remove('active')\n            this.audioRef.current.pause()\n            this.audioRef.current.currentTime = 0\n            this.setState(initialState)\n            \n          }}>\n            <span id=\"reset\"></span>\n          </Button>\n        </div>\n        \n        \n      </div>\n    )\n  }\n\n}\n\n\nfunction formatTime(miliseconds){\n  let seconds = Math.floor(miliseconds / 1000)\n  let minutes = Math.floor(seconds / 60)\n  seconds = seconds % 60\n  minutes = padTime(minutes)\n  seconds = padTime(seconds)\n  return `${minutes}:${seconds}`\n}\n\nfunction padTime(time){\n  return time < 10? '0' + String(time): String(time)\n}\n","import Clock from './features/clock/Clock';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tomato Clock</h1>\n        <Clock />\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n      <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}